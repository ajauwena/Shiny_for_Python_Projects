"""
======================================
Insurance Premium Data Visualizer App
======================================

--- Instructions ---
    1.  Activate your virtual environment, which should have the libraries listed in this script installed in it.
    2.  Execute "shiny run --reload" to run this script.

--- Output(s) ---
    -   A Shiny app.
"""

# region: --- Importing Modules ---

from shiny import App, render, ui, reactive
import pandas as pd
from plotnine import ggplot, geom_histogram, aes, labs, theme_light

# endregion

# region: --- Initializing Variables ---

# Read the "insurance_dataset.csv" dataset as a DataFrame. Set the first row as the column names and use the "utf8" encoding.
df = pd.read_csv('insurance_dataset.csv', header=0, encoding="utf8")

# Obtain the column names of the DataFrame, capitalize their first letters for aesthetic purposes, and output them as a list.
list_col_names_caps = df.columns.str.capitalize().tolist()

# Capitalize the first letters of the column names of the DataFrame using the list above.
df.columns = list_col_names_caps

# endregion

# region: --- UI Component ---

# Create a fluid page.
app_ui = ui.page_fluid(
    # Create a title for the application.
    ui.panel_title('Insurance Premium Data Visualizer'),
    # Create a sidebar layout component.
    ui.layout_sidebar(
        # Create a sidebar element.
        ui.sidebar(
            # Create a select list that can be used to choose a single item from a list of values.
            ui.input_select(id='variable_select', label='Select a variable:', choices=list_col_names_caps, selected='age'),
            # Create an output container (i.e., a designated area in the UI where the outputs generated by the server-side code are rendered and displayed) for some text.
            ui.output_text(id='selected_variable')
            ),
        # Create an output container for a static plot.
        ui.output_plot(id='visualization')
    )
)

# endregion

# region: --- Server Component ---

# Create a server function.
def server(input, output, session):

    # Create a function that generates an output text, rendered in the output container created by the "ui.output_text" function above.
    @output
    @render.text
    # Target the "selected_variable" id.
    def selected_variable():
        # Return a string that includes the chosen variable, selected using the "ui.input_select" function above.
        return f'You selected "{input.variable_select()}".'

    # Create a function that generates an output plot, rendered in the output container created by the "ui.output_plot" function above.
    @output
    @render.plot
    # Target the "visualization" id.
    def visualization():
        # Create a histogram for the chosen variable.
        hist_selected_variable = (
            ggplot(df, aes(x=input.variable_select())) +
            geom_histogram(alpha=0.5) +
            # Define the title and the label for the y-axis.
            labs(title=f'Distribution of the "{input.variable_select()}" Variable', y='Count') +
            # Use the light theme.
            theme_light()
        )
        # Return the histogram.
        return hist_selected_variable

# endregion

# region: --- App ---

app = App(app_ui, server)

# endregion